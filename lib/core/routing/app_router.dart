import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';

import '../../features/auth/presentation/controllers/auth_controller.dart';
import '../../features/auth/presentation/pages/login_page.dart';
import '../../features/auth/presentation/pages/register_page.dart';
import '../../features/auth/presentation/pages/splash_page.dart';
import '../../features/bookings/presentation/pages/bookings_page.dart';
import '../../features/clubs/presentation/pages/clubs_page.dart';
import '../../features/home/presentation/pages/home_page.dart';
import '../../features/profile/presentation/pages/profile_page.dart';
import '../design_system/widgets/error_page.dart';
import 'app_routes.dart';
import 'route_guards.dart';

part 'app_router.g.dart';

/// Global navigator key for the app, used to access the router's context
/// or perform navigation actions outside of widget build methods (e.g., from a Service).
final navigatorKey = GlobalKey<NavigatorState>();

/// Provides the configured [GoRouter] instance.
///
/// This provider is generated by Riverpod and handles the entire routing logic,
/// including deep links, URL parsing, and authentication redirects via [RouteGuards.redirect].
@riverpod
GoRouter appRouter(Ref ref) {
  ref.watch(authControllerProvider.notifier);
  final authState = ref.watch(authControllerProvider);

  return GoRouter(
    navigatorKey: navigatorKey,
    debugLogDiagnostics: true,
    initialLocation: AppRoutes.splash,
    redirect: (context, state) => RouteGuards.redirect(
      context: context,
      state: state,
      authState: authState,
    ),
    errorBuilder: (context, state) => ErrorPage(
      error: state.error?.toString() ?? 'Unknown error',
      stackTrace: state.error is Exception ? StackTrace.current : null,
    ),
    routes: [
      // Splash Route
      GoRoute(
        path: AppRoutes.splash,
        name: 'splash',
        builder: (context, state) => const SplashPage(),
      ),

      // Authentication Routes
      GoRoute(
        path: AppRoutes.login,
        name: 'login',
        builder: (context, state) => const LoginPage(),
      ),
      GoRoute(
        path: AppRoutes.register,
        name: 'register',
        builder: (context, state) => const RegisterPage(),
      ),
      GoRoute(
        path: AppRoutes.forgotPassword,
        name: 'forgotPassword',
        builder: (context, state) => const ForgotPasswordPage(),
      ),
      GoRoute(
        path: AppRoutes.resetPassword,
        name: 'resetPassword',
        builder: (context, state) =>
            ResetPasswordPage(token: state.uri.queryParameters['token']),
      ),
      GoRoute(
        path: AppRoutes.hankoAuth,
        name: 'hankoAuth',
        builder: (context, state) => HankoAuthPage(
          email: state.uri.queryParameters['email'],
          sessionId: state.uri.queryParameters['sessionId'],
        ),
      ),

      // Main App Routes with Shell Navigation
      ShellRoute(
        builder: (context, state, child) => MainShell(child: child),
        routes: [
          // Home
          GoRoute(
            path: AppRoutes.home,
            name: 'home',
            builder: (context, state) => const HomePage(),
          ),

          // Clubs
          GoRoute(
            path: AppRoutes.clubs,
            name: 'clubs',
            builder: (context, state) => const ClubsPage(),
            routes: [
              GoRoute(
                path: ':${AppRoutes.clubIdParam}',
                name: 'clubDetails',
                builder: (context, state) => ClubDetailsPage(
                  clubId: state.pathParameters[AppRoutes.clubIdParam]!,
                ),
                routes: [
                  GoRoute(
                    path: 'book',
                    name: 'createBooking',
                    builder: (context, state) => CreateBookingPage(
                      clubId: state.pathParameters[AppRoutes.clubIdParam]!,
                    ),
                  ),
                ],
              ),
              GoRoute(
                path: 'search',
                name: 'clubSearch',
                builder: (context, state) =>
                    ClubSearchPage(query: state.uri.queryParameters['q']),
              ),
              GoRoute(
                path: 'nearby',
                name: 'nearbyClubs',
                builder: (context, state) => const NearbyClubsPage(),
              ),
              GoRoute(
                path: 'favorites',
                name: 'favoriteClubs',
                builder: (context, state) => const FavoriteClubsPage(),
              ),
            ],
          ),

          // Bookings
          GoRoute(
            path: AppRoutes.bookings,
            name: 'bookings',
            builder: (context, state) => const BookingsPage(),
            routes: [
              GoRoute(
                path: ':${AppRoutes.bookingIdParam}',
                name: 'bookingDetails',
                builder: (context, state) => BookingDetailsPage(
                  bookingId: state.pathParameters[AppRoutes.bookingIdParam]!,
                ),
                routes: [
                  GoRoute(
                    path: 'edit',
                    name: 'editBooking',
                    builder: (context, state) => EditBookingPage(
                      bookingId:
                          state.pathParameters[AppRoutes.bookingIdParam]!,
                    ),
                  ),
                ],
              ),
              GoRoute(
                path: 'history',
                name: 'bookingHistory',
                builder: (context, state) => const BookingHistoryPage(),
              ),
            ],
          ),

          // Profile
          GoRoute(
            path: AppRoutes.profile,
            name: 'profile',
            builder: (context, state) => const ProfilePage(),
            routes: [
              GoRoute(
                path: 'edit',
                name: 'editProfile',
                builder: (context, state) => const EditProfilePage(),
              ),
            ],
          ),
        ],
      ),

      // Settings Routes (Full Screen)
      GoRoute(
        path: AppRoutes.settings,
        name: 'settings',
        builder: (context, state) => const SettingsPage(),
        routes: [
          GoRoute(
            path: 'notifications',
            name: 'notifications',
            builder: (context, state) => const NotificationSettingsPage(),
          ),
          GoRoute(
            path: 'privacy',
            name: 'privacy',
            builder: (context, state) => const PrivacySettingsPage(),
          ),
          GoRoute(
            path: 'security',
            name: 'security',
            builder: (context, state) => const SecuritySettingsPage(),
          ),
          GoRoute(
            path: 'support',
            name: 'support',
            builder: (context, state) => const SupportPage(),
          ),
          GoRoute(
            path: 'about',
            name: 'about',
            builder: (context, state) => const AboutPage(),
          ),
        ],
      ),

      // Membership Routes
      GoRoute(
        path: AppRoutes.membership,
        name: 'membership',
        builder: (context, state) => const MembershipPage(),
        routes: [
          GoRoute(
            path: 'tiers',
            name: 'membershipTiers',
            builder: (context, state) => const MembershipTiersPage(),
          ),
          GoRoute(
            path: 'upgrade',
            name: 'membershipUpgrade',
            builder: (context, state) => const MembershipUpgradePage(),
          ),
          GoRoute(
            path: 'benefits',
            name: 'membershipBenefits',
            builder: (context, state) => const MembershipBenefitsPage(),
          ),
        ],
      ),

      // Payment Routes
      GoRoute(
        path: AppRoutes.payments,
        name: 'payments',
        builder: (context, state) => const PaymentsPage(),
        routes: [
          GoRoute(
            path: 'methods',
            name: 'paymentMethods',
            builder: (context, state) => const PaymentMethodsPage(),
            routes: [
              GoRoute(
                path: 'add',
                name: 'addPaymentMethod',
                builder: (context, state) => const AddPaymentMethodPage(),
              ),
            ],
          ),
          GoRoute(
            path: 'history',
            name: 'paymentHistory',
            builder: (context, state) => const PaymentHistoryPage(),
          ),
          GoRoute(
            path: 'invoices',
            name: 'invoices',
            builder: (context, state) => const InvoicesPage(),
          ),
        ],
      ),

      // Utility Routes
      GoRoute(
        path: AppRoutes.qrScanner,
        name: 'qrScanner',
        builder: (context, state) => const QRScannerPage(),
      ),
      GoRoute(
        path: AppRoutes.map,
        name: 'map',
        builder: (context, state) => const MapPage(),
      ),
      GoRoute(
        path: AppRoutes.camera,
        name: 'camera',
        builder: (context, state) => const CameraPage(),
      ),
      GoRoute(
        path: AppRoutes.imageViewer,
        name: 'imageViewer',
        builder: (context, state) => ImageViewerPage(
          imageUrl: state.uri.queryParameters['url'] ?? '',
          heroTag: state.uri.queryParameters['hero'],
        ),
      ),
      GoRoute(
        path: AppRoutes.webView,
        name: 'webView',
        builder: (context, state) => WebViewPage(
          url: state.uri.queryParameters['url'] ?? '',
          title: state.uri.queryParameters['title'],
        ),
      ),

      // Deep Link Routes
      GoRoute(
        path: AppRoutes.clubInvite,
        name: 'clubInvite',
        builder: (context, state) => ClubInvitePage(
          inviteCode: state.pathParameters[AppRoutes.inviteCodeParam]!,
        ),
      ),
      GoRoute(
        path: AppRoutes.eventInvite,
        name: 'eventInvite',
        builder: (context, state) => EventInvitePage(
          eventId: state.pathParameters[AppRoutes.eventIdParam]!,
        ),
      ),
      GoRoute(
        path: AppRoutes.shareClub,
        name: 'shareClub',
        builder: (context, state) =>
            ShareClubPage(clubId: state.pathParameters[AppRoutes.clubIdParam]!),
      ),
      GoRoute(
        path: AppRoutes.shareBooking,
        name: 'shareBooking',
        builder: (context, state) => ShareBookingPage(
          bookingId: state.pathParameters[AppRoutes.bookingIdParam]!,
        ),
      ),

      // Error Routes
      GoRoute(
        path: AppRoutes.notFound,
        name: 'notFound',
        builder: (context, state) => const NotFoundPage(),
      ),
      GoRoute(
        path: AppRoutes.error,
        name: 'error',
        builder: (context, state) => ErrorPage(
          error:
              state.uri.queryParameters[AppRoutes.errorParam] ??
              'Unknown error',
        ),
      ),
      GoRoute(
        path: AppRoutes.maintenance,
        name: 'maintenance',
        builder: (context, state) => MaintenancePage(
          message: state.uri.queryParameters[AppRoutes.messageParam],
        ),
      ),
    ],
  );
}

/// Provides utility methods for common navigation patterns on [GoRouter].
extension AppRouterExtension on GoRouter {
  /// Navigates to a [path] and clears the entire navigation stack,
  /// ensuring the user cannot navigate back to previous routes.
  ///
  /// This is typically used for navigation following core state changes, like
  /// logging in or signing out.
  void goAndClearStack(String path) {
    while (canPop()) {
      pop();
    }
    go(path);
  }

  /// Navigates to the main application home route (`AppRoutes.home`) and clears the stack.
  void goHome() {
    goAndClearStack(AppRoutes.home);
  }

  /// Navigates to the login route (`AppRoutes.login`) and clears the stack.
  void goToLogin() {
    goAndClearStack(AppRoutes.login);
  }

  /// Navigates back if possible, otherwise navigates to the specified [fallbackPath].
  ///
  /// This prevents users from getting stuck on screens when the history stack is empty.
  void goBackOrTo(String fallbackPath) {
    if (canPop()) {
      pop();
    } else {
      go(fallbackPath);
    }
  }
}

/// --- Placeholder Pages (To be moved to their respective feature modules) ---

/// Placeholder page for Forgot Password functionality.
class ForgotPasswordPage extends StatelessWidget {
  /// Creates a [ForgotPasswordPage].
  const ForgotPasswordPage({super.key});
  @override
  Widget build(BuildContext context) =>
      const Scaffold(body: Center(child: Text('Forgot Password')));
}

/// Placeholder page for Reset Password functionality.
class ResetPasswordPage extends StatelessWidget {
  /// Creates a [ResetPasswordPage].
  const ResetPasswordPage({super.key, this.token});

  /// The password reset token passed via query parameters.
  final String? token;
  @override
  Widget build(BuildContext context) =>
      const Scaffold(body: Center(child: Text('Reset Password')));
}

/// Placeholder page for Hanko authentication flow.
class HankoAuthPage extends StatelessWidget {
  /// Creates a [HankoAuthPage].
  const HankoAuthPage({super.key, this.email, this.sessionId});

  /// User's email from the authentication flow.
  final String? email;

  /// Session ID for the authentication flow.
  final String? sessionId;
  @override
  Widget build(BuildContext context) =>
      const Scaffold(body: Center(child: Text('Hanko Auth')));
}

/// A shell widget used for the main application navigation routes.
///
/// This would typically contain the [BottomNavigationBar] or [SideNavigationBar].
class MainShell extends StatelessWidget {
  /// Creates a [MainShell] widget.
  const MainShell({required this.child, super.key});

  /// The current child route to be displayed within the shell.
  final Widget child;
  @override
  Widget build(BuildContext context) => Scaffold(body: child);
}

/// Placeholder page for displaying details of a specific club.
class ClubDetailsPage extends StatelessWidget {
  /// Creates a [ClubDetailsPage].
  const ClubDetailsPage({required this.clubId, super.key});

  /// The unique identifier for the club.
  final String clubId;
  @override
  Widget build(BuildContext context) =>
      Scaffold(body: Center(child: Text('Club Details: $clubId')));
}

/// Placeholder page for initiating a new booking for a club.
class CreateBookingPage extends StatelessWidget {
  /// Creates a [CreateBookingPage].
  const CreateBookingPage({required this.clubId, super.key});

  /// The unique identifier for the club to book for.
  final String clubId;
  @override
  Widget build(BuildContext context) =>
      Scaffold(body: Center(child: Text('Create Booking for: $clubId')));
}

/// Placeholder page for searching clubs.
class ClubSearchPage extends StatelessWidget {
  /// Creates a [ClubSearchPage].
  const ClubSearchPage({super.key, this.query});

  /// The optional search query string.
  final String? query;
  @override
  Widget build(BuildContext context) =>
      const Scaffold(body: Center(child: Text('Club Search')));
}

/// Placeholder page for displaying nearby clubs based on location.
class NearbyClubsPage extends StatelessWidget {
  /// Creates a [NearbyClubsPage].
  const NearbyClubsPage({super.key});
  @override
  Widget build(BuildContext context) =>
      const Scaffold(body: Center(child: Text('Nearby Clubs')));
}

/// Placeholder page for displaying the user's favorite clubs.
class FavoriteClubsPage extends StatelessWidget {
  /// Creates a [FavoriteClubsPage].
  const FavoriteClubsPage({super.key});
  @override
  Widget build(BuildContext context) =>
      const Scaffold(body: Center(child: Text('Favorite Clubs')));
}

/// Placeholder page for displaying details of a specific booking.
class BookingDetailsPage extends StatelessWidget {
  /// Creates a [BookingDetailsPage].
  const BookingDetailsPage({required this.bookingId, super.key});

  /// The unique identifier for the booking.
  final String bookingId;
  @override
  Widget build(BuildContext context) =>
      Scaffold(body: Center(child: Text('Booking Details: $bookingId')));
}

/// Placeholder page for editing an existing booking.
class EditBookingPage extends StatelessWidget {
  /// Creates an [EditBookingPage].
  const EditBookingPage({required this.bookingId, super.key});

  /// The unique identifier for the booking to edit.
  final String bookingId;
  @override
  Widget build(BuildContext context) =>
      Scaffold(body: Center(child: Text('Edit Booking: $bookingId')));
}

/// Placeholder page for displaying the user's historical bookings.
class BookingHistoryPage extends StatelessWidget {
  /// Creates a [BookingHistoryPage].
  const BookingHistoryPage({super.key});
  @override
  Widget build(BuildContext context) =>
      const Scaffold(body: Center(child: Text('Booking History')));
}

/// Placeholder page for editing the user's profile information.
class EditProfilePage extends StatelessWidget {
  /// Creates an [EditProfilePage].
  const EditProfilePage({super.key});
  @override
  Widget build(BuildContext context) =>
      const Scaffold(body: Center(child: Text('Edit Profile')));
}

/// Placeholder page for the main Settings hub.
class SettingsPage extends StatelessWidget {
  /// Creates a [SettingsPage].
  const SettingsPage({super.key});
  @override
  Widget build(BuildContext context) =>
      const Scaffold(body: Center(child: Text('Settings')));
}

/// Placeholder page for managing notification preferences.
class NotificationSettingsPage extends StatelessWidget {
  /// Creates a [NotificationSettingsPage].
  const NotificationSettingsPage({super.key});
  @override
  Widget build(BuildContext context) =>
      const Scaffold(body: Center(child: Text('Notification Settings')));
}

/// Placeholder page for managing privacy settings.
class PrivacySettingsPage extends StatelessWidget {
  /// Creates a [PrivacySettingsPage].
  const PrivacySettingsPage({super.key});
  @override
  Widget build(BuildContext context) =>
      const Scaffold(body: Center(child: Text('Privacy Settings')));
}

/// Placeholder page for managing account security settings.
class SecuritySettingsPage extends StatelessWidget {
  /// Creates a [SecuritySettingsPage].
  const SecuritySettingsPage({super.key});
  @override
  Widget build(BuildContext context) =>
      const Scaffold(body: Center(child: Text('Security Settings')));
}

/// Placeholder page for accessing support resources or contact information.
class SupportPage extends StatelessWidget {
  /// Creates a [SupportPage].
  const SupportPage({super.key});
  @override
  Widget build(BuildContext context) =>
      const Scaffold(body: Center(child: Text('Support')));
}

/// Placeholder page for information about the application.
class AboutPage extends StatelessWidget {
  /// Creates an [AboutPage].
  const AboutPage({super.key});
  @override
  Widget build(BuildContext context) =>
      const Scaffold(body: Center(child: Text('About')));
}

/// Placeholder page for membership details.
class MembershipPage extends StatelessWidget {
  /// Creates a [MembershipPage].
  const MembershipPage({super.key});
  @override
  Widget build(BuildContext context) =>
      const Scaffold(body: Center(child: Text('Membership')));
}

/// Placeholder page for displaying different membership tiers.
class MembershipTiersPage extends StatelessWidget {
  /// Creates a [MembershipTiersPage].
  const MembershipTiersPage({super.key});
  @override
  Widget build(BuildContext context) =>
      const Scaffold(body: Center(child: Text('Membership Tiers')));
}

/// Placeholder page for upgrading the user's membership.
class MembershipUpgradePage extends StatelessWidget {
  /// Creates a [MembershipUpgradePage].
  const MembershipUpgradePage({super.key});
  @override
  Widget build(BuildContext context) =>
      const Scaffold(body: Center(child: Text('Membership Upgrade')));
}

/// Placeholder page for highlighting membership benefits.
class MembershipBenefitsPage extends StatelessWidget {
  /// Creates a [MembershipBenefitsPage].
  const MembershipBenefitsPage({super.key});
  @override
  Widget build(BuildContext context) =>
      const Scaffold(body: Center(child: Text('Membership Benefits')));
}

/// Placeholder page for the main Payments hub.
class PaymentsPage extends StatelessWidget {
  /// Creates a [PaymentsPage].
  const PaymentsPage({super.key});
  @override
  Widget build(BuildContext context) =>
      const Scaffold(body: Center(child: Text('Payments')));
}

/// Placeholder page for managing stored payment methods.
class PaymentMethodsPage extends StatelessWidget {
  /// Creates a [PaymentMethodsPage].
  const PaymentMethodsPage({super.key});
  @override
  Widget build(BuildContext context) =>
      const Scaffold(body: Center(child: Text('Payment Methods')));
}

/// Placeholder page for adding a new payment method.
class AddPaymentMethodPage extends StatelessWidget {
  /// Creates an [AddPaymentMethodPage].
  const AddPaymentMethodPage({super.key});
  @override
  Widget build(BuildContext context) =>
      const Scaffold(body: Center(child: Text('Add Payment Method')));
}

/// Placeholder page for viewing payment transaction history.
class PaymentHistoryPage extends StatelessWidget {
  /// Creates a [PaymentHistoryPage].
  const PaymentHistoryPage({super.key});
  @override
  Widget build(BuildContext context) =>
      const Scaffold(body: Center(child: Text('Payment History')));
}

/// Placeholder page for viewing invoices.
class InvoicesPage extends StatelessWidget {
  /// Creates an [InvoicesPage].
  const InvoicesPage({super.key});
  @override
  Widget build(BuildContext context) =>
      const Scaffold(body: Center(child: Text('Invoices')));
}

/// Placeholder page for a QR Code Scanner utility.
class QRScannerPage extends StatelessWidget {
  /// Creates a [QRScannerPage].
  const QRScannerPage({super.key});
  @override
  Widget build(BuildContext context) =>
      const Scaffold(body: Center(child: Text('QR Scanner')));
}

/// Placeholder page for a map view (e.g., showing clubs or locations).
class MapPage extends StatelessWidget {
  /// Creates a [MapPage].
  const MapPage({super.key});
  @override
  Widget build(BuildContext context) =>
      const Scaffold(body: Center(child: Text('Map')));
}

/// Placeholder page for accessing the device camera.
class CameraPage extends StatelessWidget {
  /// Creates a [CameraPage].
  const CameraPage({super.key});
  @override
  Widget build(BuildContext context) =>
      const Scaffold(body: Center(child: Text('Camera')));
}

/// Placeholder page for viewing a single image, potentially with a hero animation.
class ImageViewerPage extends StatelessWidget {
  /// Creates an [ImageViewerPage].
  const ImageViewerPage({required this.imageUrl, super.key, this.heroTag});

  /// The URL of the image to display.
  final String imageUrl;

  /// The hero tag for a transition animation.
  final String? heroTag;
  @override
  Widget build(BuildContext context) =>
      Scaffold(body: Center(child: Text('Image Viewer: $imageUrl')));
}

/// Placeholder page for displaying external web content within the app.
class WebViewPage extends StatelessWidget {
  /// Creates a [WebViewPage].
  const WebViewPage({required this.url, super.key, this.title});

  /// The URL to load in the web view.
  final String url;

  /// An optional title for the web view screen.
  final String? title;
  @override
  Widget build(BuildContext context) =>
      Scaffold(body: Center(child: Text('Web View: $url')));
}

/// Placeholder page for handling deep links for club invitations.
class ClubInvitePage extends StatelessWidget {
  /// Creates a [ClubInvitePage].
  const ClubInvitePage({required this.inviteCode, super.key});

  /// The unique invitation code.
  final String inviteCode;
  @override
  Widget build(BuildContext context) =>
      Scaffold(body: Center(child: Text('Club Invite: $inviteCode')));
}

/// Placeholder page for handling deep links for event invitations.
class EventInvitePage extends StatelessWidget {
  /// Creates an [EventInvitePage].
  const EventInvitePage({required this.eventId, super.key});

  /// The unique event identifier.
  final String eventId;
  @override
  Widget build(BuildContext context) =>
      Scaffold(body: Center(child: Text('Event Invite: $eventId')));
}

/// Placeholder page for sharing club information.
class ShareClubPage extends StatelessWidget {
  /// Creates a [ShareClubPage].
  const ShareClubPage({required this.clubId, super.key});

  /// The unique identifier of the club to share.
  final String clubId;
  @override
  Widget build(BuildContext context) =>
      Scaffold(body: Center(child: Text('Share Club: $clubId')));
}

/// Placeholder page for sharing booking information.
class ShareBookingPage extends StatelessWidget {
  /// Creates a [ShareBookingPage].
  const ShareBookingPage({required this.bookingId, super.key});

  /// The unique identifier of the booking to share.
  final String bookingId;
  @override
  Widget build(BuildContext context) =>
      Scaffold(body: Center(child: Text('Share Booking: $bookingId')));
}

/// Placeholder page displayed when a route is not found (404).
class NotFoundPage extends StatelessWidget {
  /// Creates a [NotFoundPage].
  const NotFoundPage({super.key});
  @override
  Widget build(BuildContext context) =>
      const Scaffold(body: Center(child: Text('404 - Page Not Found')));
}

/// Placeholder page displayed when the application is under maintenance.
class MaintenancePage extends StatelessWidget {
  /// Creates a [MaintenancePage].
  const MaintenancePage({super.key, this.message});

  /// An optional message explaining the maintenance reason.
  final String? message;
  @override
  Widget build(BuildContext context) => Scaffold(
    body: Center(child: Text('Maintenance: ${message ?? 'Under maintenance'}')),
  );
}
